{"ast":null,"code":"var _jsxFileName = \"/Users/smolensky/Projects/personal/pantry-next/pages/recipes.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Layout from '../comps/Layout';\n\nconst RecipeIndex = () => {\n  const router = useRouter();\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, router.query.title), __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"Recipes\")), __jsx(\"div\", {\n    className: \"col-lg-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"recipe-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"recipe-card__meta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nRecipeIndex.getInitialProps = async function (context) {\n  const {\n    query\n  } = context.query.q;\n  const queryPath = context.asPath; //clean up queryPath to match better what the api expects\n\n  const cleanUpQuery = queryPath.replace(\"%2C\", \",\");\n  console.log(cleanUpQuery); //console.log(query, context.pathname, context.asPath, context.res); undefined, /recipes, /recipes?q=flour, undefined\n\n  const response = await fetch(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${query}&apiKey=${process.env.API_KEY}`);\n  const data = await response.json(); // console.log(transformQuery);\n\n  return {\n    recipes: data\n  };\n};\n\nexport default RecipeIndex;","map":{"version":3,"sources":["/Users/smolensky/Projects/personal/pantry-next/pages/recipes.js"],"names":["useRouter","Layout","RecipeIndex","router","query","title","getInitialProps","context","q","queryPath","asPath","cleanUpQuery","replace","console","log","response","fetch","process","env","API_KEY","data","json","recipes"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,MAAM,CAACC,KAAP,CAAaC,KAAlB,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF,CAJF,CAFF,CADF;AAsBH,CAzBD;;AA2BAH,WAAW,CAACI,eAAZ,GAA8B,gBAAeC,OAAf,EAAuB;AACnD,QAAM;AAACH,IAAAA;AAAD,MAAUG,OAAO,CAACH,KAAR,CAAcI,CAA9B;AACA,QAAMC,SAAS,GAAGF,OAAO,CAACG,MAA1B,CAFmD,CAGnD;;AACA,QAAMC,YAAY,GAAGF,SAAS,CAACG,OAAV,CAAkB,KAAlB,EAAyB,GAAzB,CAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ,EALmD,CAMnD;;AACA,QAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,qEAAoEZ,KAAM,WAAUa,OAAO,CAACC,GAAR,CAAYC,OAAQ,EAA1G,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB,CARmD,CAUnD;;AAEA,SAAO;AACHC,IAAAA,OAAO,EAAEF;AADN,GAAP;AAGD,CAfD;;AAiBA,eAAelB,WAAf","sourcesContent":["import {useRouter} from 'next/router';\nimport Layout from '../comps/Layout';\n\nconst RecipeIndex = () => {\n    const router = useRouter();\n\n    return(\n      <Layout>\n        <h1>{router.query.title}</h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1>Recipes</h1>\n          </div>\n          <div className=\"col-lg-3\">\n            <div className=\"recipe-card\">\n              {/* <img className=\"img-fluid\" src={props.data.image} alt={props.data.title} />\n              <h2>{props.data.title}</h2> */}\n              <div className=\"recipe-card__meta\">\n                <ul>\n                  {/* <li>{props.data.readyInMinutes} min</li>\n                  <li>{props.data.servings} people</li> */}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n    </Layout>\n    )\n}\n\nRecipeIndex.getInitialProps = async function(context){\n  const {query} = context.query.q;\n  const queryPath = context.asPath;\n  //clean up queryPath to match better what the api expects\n  const cleanUpQuery = queryPath.replace(\"%2C\", \",\");\n  console.log(cleanUpQuery);\n  //console.log(query, context.pathname, context.asPath, context.res); undefined, /recipes, /recipes?q=flour, undefined\n  const response = await fetch(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${query}&apiKey=${process.env.API_KEY}`);\n  const data = await response.json();\n\n  // console.log(transformQuery);\n\n  return {\n      recipes: data\n  };\n};\n\nexport default RecipeIndex;"]},"metadata":{},"sourceType":"module"}